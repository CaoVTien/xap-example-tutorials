<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:os-core="http://www.openspaces.org/schema/core"
       xmlns:os-events="http://www.openspaces.org/schema/events"
       xmlns:os-remoting="http://www.openspaces.org/schema/remoting"
       xmlns:os-sla="http://www.openspaces.org/schema/sla"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/9.6/core/openspaces-core.xsd
       http://www.openspaces.org/schema/events http://www.openspaces.org/schema/9.6/events/openspaces-events.xsd
       http://www.openspaces.org/schema/remoting http://www.openspaces.org/schema/9.6/remoting/openspaces-remoting.xsd
       http://www.openspaces.org/schema/sla http://www.openspaces.org/schema/9.6/sla/openspaces-sla.xsd">
    
    <!-- Simply use SLA to add 3 monitors that uses the outputOrderEvent bean to count the globaly
         processed and rejected due to matching account not found orderEvents objects 
         and count the number of new orderEvents written. -->
    <os-sla:sla>
        <os-sla:monitors>
            <os-sla:bean-property-monitor name="Written OrderEvent" bean-ref="outputOrderEvent" property-name="orderEventWrittenCounter" />
            <os-sla:bean-property-monitor name="Processed OrderEvent" bean-ref="outputOrderEvent" property-name="orderEventProcessedCounter" />
            <os-sla:bean-property-monitor name="AccountNotFound OrderEvent" bean-ref="outputOrderEvent" property-name="orderEventAccountNotFoundCounter" />
        </os-sla:monitors>
    </os-sla:sla>
    
    <!-- Spring property configurer which allows us to use system properties (such as user.name). -->
    <bean id="propertiesConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

    <!-- Enables the usage of @GigaSpaceContext annotation based injection. -->
    <os-core:giga-space-context/>

    <!-- A bean representing a space (an IJSpace implementation).
         Note, we perform a lookup on the space since we are working against a remote space. -->
    <os-core:space id="space" url="jini://*/*/spaceOMS"/>

    <!-- OpenSpaces simplified space API built on top of IJSpace/JavaSpace. -->
    <os-core:giga-space id="gigaSpace" space="space"/>
			
	<!-- This bean outputs the userName and balance attributes of the AccountData object -->
    <bean id="outputAccountData" class="org.openspaces.example.oms.stats.OutputAccountData"/>
	
	<!-- The notification container, registers for notification on every AccountData write or update and 
	invokes	the outputAccountData listner on a copy of the object that triggered the event -->
	<os-events:notify-container id="accountDataNotifyContainer" giga-space="gigaSpace" com-type="UNICAST">
		<!-- The notification will occur upon write or update -->
		<os-events:notify write="true" update="true"/>
		<os-core:template>
	        <bean class="org.openspaces.example.oms.common.AccountData">
	        <!-- using template without properties to get all accountData objects -->
	        </bean>
	    </os-core:template>
	    <os-events:listener>
	        <os-events:annotation-adapter>
	            <!-- The adapter activates the outputAccountData.<method annotated as @SpaceDataEvent> on
	            	 the accontData object --> 
	            <os-events:delegate ref="outputAccountData"/>
	        </os-events:annotation-adapter>
	    </os-events:listener>
	</os-events:notify-container>

    <!-- This bean outputs the attributes of the orderEvent object -->
    <bean id="outputOrderEvent" class="org.openspaces.example.oms.stats.OutputOrderEventCounter"/>
    
    <!-- The notification container, registers for notification on every orderEvent write (notify 
    on write is default), invokes the outputOrderEvent listner on a copy of the object that 
    triggered the event -->
	<os-events:notify-container id="orderEventNotifyContainer" giga-space="gigaSpace">
		<os-core:template>
	        <bean class="org.openspaces.example.oms.common.OrderEvent">
	        </bean>
	    </os-core:template>
	    <os-events:listener>
	        <os-events:annotation-adapter>
	            <os-events:delegate ref="outputOrderEvent"/>
	        </os-events:annotation-adapter>
	    </os-events:listener>
	</os-events:notify-container>

</beans>