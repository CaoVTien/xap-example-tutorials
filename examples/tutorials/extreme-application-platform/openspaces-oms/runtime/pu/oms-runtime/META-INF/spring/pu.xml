<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:os-core="http://www.openspaces.org/schema/core"
       xmlns:os-events="http://www.openspaces.org/schema/events"
       xmlns:os-remoting="http://www.openspaces.org/schema/remoting"
       xmlns:os-sla="http://www.openspaces.org/schema/sla"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/10.1/core/openspaces-core.xsd
       http://www.openspaces.org/schema/events http://www.openspaces.org/schema/10.1/events/openspaces-events.xsd
       http://www.openspaces.org/schema/remoting http://www.openspaces.org/schema/10.1/remoting/openspaces-remoting.xsd
       http://www.openspaces.org/schema/sla http://www.openspaces.org/schema/10.1/sla/openspaces-sla.xsd">

    <!-- Spring property configurer which allows us to use system properties (such as user.name). -->
    <bean id="propertiesConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

	<!-- 
		This component is the RequiredAnnotationBeanPostProcessor class. This is a special BeanPostProcessor implementation 
		that is @Required-aware and actually provides the 'blow up if this required property has not been set' logic. 
		It is very easy to configure; simply drop the following bean definition into your Spring XML configuration. 
	-->
	<bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>

    <!-- Enables the usage of @GigaSpaceContext annotation based injection. -->
    <os-core:giga-space-context/>
	
	<!-- Loads a Spring application context (based on a separate Spring xml configuration file - here mode.xml) 
		 only the if processing unit / space is in primary mode and unload it when the processing unit / space 
		 is in backup mode. -->
	<os-core:context-loader id="spaceMode" location="classpath:/META-INF/spring/mode/mode.xml"/>
	
	<!-- A bean representing AccountDataDAO using GigaSpaces (an IAccountDataDAO implementation) -->
	<bean id="accountDataDAO" class="org.openspaces.example.oms.common.AccountDataDAO"/>
	
    <!-- A bean representing a space (an IJSpace implementation).
		 Note, we do not specify here the cluster topology of the space. It is declared outside of
         the processing unit or within the SLA bean. -->
    <os-core:embedded-space id="space" name="spaceOMS"/>

    <!-- OpenSpaces simplified space API built on top of IJSpace/JavaSpace. -->
    <os-core:giga-space id="gigaSpace" space="space" tx-manager="transactionManager"/>

    <!-- Defines a distributed transaction manager. -->
    <os-core:distributed-tx-manager id="transactionManager"/>
	
	<!-- The orderEvent validator bean -->
    <bean id="orderEventValidator" class="org.openspaces.example.oms.runtime.OrderEventValidator">
    	<property name="accountDataDAO" ref="accountDataDAO" />
    </bean>
	
	<!-- A polling event container that performs (by default) polling take operations against
         the space using the provided template (in our case, the new orderEvents objects).
         Once a match is found, the orderEvent processor bean event listener is triggered using the
         annotation adapter. -->
    <os-events:polling-container id="orderEventValidatorPollingEventContainer" giga-space="gigaSpace">
        <os-events:tx-support tx-manager="transactionManager"/>
        <os-core:template>
            <bean class="org.openspaces.example.oms.common.OrderEvent">
                <property name="status" value="New"/>
            </bean>
        </os-core:template>
        <os-events:listener>
            <os-events:annotation-adapter>
                <os-events:delegate ref="orderEventValidator"/>
            </os-events:annotation-adapter>
        </os-events:listener>
    </os-events:polling-container>
	
    <!-- The orderEvent processor bean -->
    <bean id="orderEventProcessor" class="org.openspaces.example.oms.runtime.OrderEventProcessor">
    	<property name="accountDataDAO" ref="accountDataDAO" />
    </bean>

    <!-- A polling event container that performs (by default) polling take operations with txn 
    	 support against the space using the provided template (in our case, the pending orderEvent objects).
         Once a match is found, the data processor bean event listener is triggered using the
         annotation adapter. -->
    <os-events:polling-container id="orderEventProcessorPollingEventContainer" giga-space="gigaSpace">
        <os-events:tx-support tx-manager="transactionManager"/>
        <os-core:template>
            <bean class="org.openspaces.example.oms.common.OrderEvent">
                <property name="status" value="Pending"/>
            </bean>
        </os-core:template>
        <os-events:listener>
            <os-events:annotation-adapter>
                <os-events:delegate ref="orderEventProcessor"/>
            </os-events:annotation-adapter>
        </os-events:listener>
    </os-events:polling-container>

</beans>
