<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:os-core="http://www.openspaces.org/schema/core"
       xmlns:os-events="http://www.openspaces.org/schema/events"
       xmlns:os-remoting="http://www.openspaces.org/schema/remoting"
       xmlns:os-sla="http://www.openspaces.org/schema/sla"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/9.7/core/openspaces-core.xsd
       http://www.openspaces.org/schema/events http://www.openspaces.org/schema/9.7/events/openspaces-events.xsd
       http://www.openspaces.org/schema/remoting http://www.openspaces.org/schema/9.7/remoting/openspaces-remoting.xsd
       http://www.openspaces.org/schema/sla http://www.openspaces.org/schema/9.7/sla/openspaces-sla.xsd">
    
    <!-- Spring property configurer which allows us to use system properties (such as user.name). 
    	 Here we define a common numberOfAccounts property to be injected to the AccountDataLoader
    	 and to the OrderEventFeeder beans -->
    <bean id="propertiesConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    	<property name="properties">
    		<props>
    			<prop key="numberOfAccounts">100</prop>
    		</props>
    	</property>
    </bean>

	<!-- This component is the RequiredAnnotationBeanPostProcessor class. This is a special BeanPostProcessor implementation 
		 that is @Required-aware and actually provides the 'blow up if this required property has not been set' logic. 
		 It is very easy to configure; simply drop the following bean definition into your Spring XML configuration. -->
	<bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>

    <!-- Enables the usage of @GigaSpaceContext annotation based injection. -->
    <os-core:giga-space-context/>
	
	<!-- A bean representing AccountDataDAO using GigaSpaces (an IAccountDataDAO implementation) -->
	<bean id="accountDataDAO" class="org.openspaces.example.oms.common.AccountDataDAO"/>
	
    <!-- A bean representing a space (an IJSpace implementation).
         Note, we perform a lookup on the space since we are working against a remote space. -->
    <os-core:space id="space" url="jini://*/*/spaceOMS"/>

    <!-- OpenSpaces simplified space API built on top of IJSpace/JavaSpace. -->
    <os-core:giga-space id="gigaSpace" space="space"/>

	<!-- The AccountData loader bean, writing new 750 unique AccountData objects to the space. -->
    <bean id="accountDataLoader" class="org.openspaces.example.oms.feeder.AccountDataLoader">
		<property name="numberOfAccounts" value="${numberOfAccounts}" />
    	<property name="accountDataDAO" ref="accountDataDAO" />
    </bean>

    <!-- The Data feeder bean, writing new OrderEvents objects to the space in a constant interval.
    	 the depends-on attribute ensures the feeder will start only after the feeder bean is done -->
    <bean id="orderEventFeeder" class="org.openspaces.example.oms.feeder.OrderEventFeeder" depends-on="accountDataLoader">
		<property name="numberOfAccounts" value="${numberOfAccounts}" />
    </bean>

</beans>